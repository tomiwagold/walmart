# -*- coding: utf-8 -*-
"""WALMART

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10w-kJgCMh8i9q1xR7x1dgJiaKWP4r2UA
"""

import pandas as pd
import numpy as np
import streamlit as st


import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv('Walmart.csv')






# Data preprocessing
df['Date'] = pd.to_datetime(df['Date'], format='%d-%m-%Y')
df['Year'] = df['Date'].dt.year
df['Month'] = df['Date'].dt.month

df.drop(columns=['Date'], inplace=True)



# Outlier handling using IQR
Q1 = df['Weekly_Sales'].quantile(0.25)
Q3 = df['Weekly_Sales'].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Removing outliers
df = df[(df['Weekly_Sales'] >= lower_bound) & (df['Weekly_Sales'] <= upper_bound)]

from sklearn.model_selection import train_test_split

# Splitting the dataset
X = df[['Store', 'Holiday_Flag', 'Temperature', 'Fuel_Price', 'CPI', 'Unemployment', 'Year', 'Month']]
y = df['Weekly_Sales']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.ensemble import RandomForestRegressor

# Model training
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# Predictions
y_pred_rf = rf_model.predict(X_test)

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Evaluation
mae_rf = mean_absolute_error(y_test, y_pred_rf)
mse_rf = mean_squared_error(y_test, y_pred_rf)
r2_rf = r2_score(y_test, y_pred_rf)

print("Random Forest Regressor Performance:")
print(f'MAE: {mae_rf:.2f}')
print(f'MSE: {mse_rf:.2f}')
print(f'R-squared: {r2_rf:.2f}')

# Training Score vs Test Score

print("Train Score vs Test Score")

train_score = rf_model.score(X_train, y_train)
print(f"Train Score: {train_score:.2f}")

test_score = rf_model.score(X_test, y_test)
print(f"Test Score: {test_score:.2f}")

def load_model():
    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    return model

# Streamlit App
def main(Store, Holiday_Flag, Temperature, Fuel_Price, CPI, Unemployment, Year, Month):
    input_data = pd.DataFrame({
        'Store' : [Store],
        'Holiday_Flag' : [Holiday_Flag],
        'Temperature':[Temperature],
        'Fuel_Price':[Fuel_Price],
        'CPI':[CPI],
        'Unemployment':Unemployment,
        'Year':Year,
        'Month' :Month
    })
    prediction = model.predict(input_data)
    return prediction[0]

# Calling the model function (load model)
model = load_model()

st.title('Walmart Weekly Sales Prediction')
st.write('Input the parameters to predict weekly sales.')

# User Input
Store = st.number_input('Store', min_value=1, step=1)
Holiday_Flag = st.selectbox('Holiday Week', [0, 1])
Temperature = st.number_input('Temperature (F)', step=0.1)
Fuel_Price = st.number_input('Fuel Price ($)', step=0.01)
CPI = st.number_input('CPI (Consumer Price Index)', step=0.1)
Unemployment = st.number_input('Unemployment Rate', step=0.1)
Year = st.selectbox('Year', [2010, 2011, 2012])
Month = st.slider('Month', 1, 12)

# Prediction
if st.button('Predict Weekly Sales'):

        main(Store, Holiday_Flag, Temperature, Fuel_Price, CPI, Unemployment, Year, Month)

        # Get prediction
        prediction = main(Store, Holiday_Flag, Temperature, Fuel_Price, CPI, Unemployment, Year, Month)


        st.success(f'Predicted Weekly Sales: ${prediction:.2f}')




